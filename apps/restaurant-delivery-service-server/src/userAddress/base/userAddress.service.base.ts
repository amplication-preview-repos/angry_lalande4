/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserAddress as PrismaUserAddress } from "@prisma/client";

export class UserAddressServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserAddressCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userAddress.count(args);
  }

  async userAddresses<T extends Prisma.UserAddressFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAddressFindManyArgs>
  ): Promise<PrismaUserAddress[]> {
    return this.prisma.userAddress.findMany<Prisma.UserAddressFindManyArgs>(
      args
    );
  }
  async userAddress<T extends Prisma.UserAddressFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAddressFindUniqueArgs>
  ): Promise<PrismaUserAddress | null> {
    return this.prisma.userAddress.findUnique(args);
  }
  async createUserAddress<T extends Prisma.UserAddressCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAddressCreateArgs>
  ): Promise<PrismaUserAddress> {
    return this.prisma.userAddress.create<T>(args);
  }
  async updateUserAddress<T extends Prisma.UserAddressUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAddressUpdateArgs>
  ): Promise<PrismaUserAddress> {
    return this.prisma.userAddress.update<T>(args);
  }
  async deleteUserAddress<T extends Prisma.UserAddressDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAddressDeleteArgs>
  ): Promise<PrismaUserAddress> {
    return this.prisma.userAddress.delete(args);
  }
}
