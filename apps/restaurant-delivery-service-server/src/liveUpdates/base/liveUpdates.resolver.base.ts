/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LiveUpdates } from "./LiveUpdates";
import { LiveUpdatesCountArgs } from "./LiveUpdatesCountArgs";
import { LiveUpdatesFindManyArgs } from "./LiveUpdatesFindManyArgs";
import { LiveUpdatesFindUniqueArgs } from "./LiveUpdatesFindUniqueArgs";
import { CreateLiveUpdatesArgs } from "./CreateLiveUpdatesArgs";
import { UpdateLiveUpdatesArgs } from "./UpdateLiveUpdatesArgs";
import { DeleteLiveUpdatesArgs } from "./DeleteLiveUpdatesArgs";
import { Order } from "../../order/base/Order";
import { LiveUpdatesService } from "../liveUpdates.service";
@graphql.Resolver(() => LiveUpdates)
export class LiveUpdatesResolverBase {
  constructor(protected readonly service: LiveUpdatesService) {}

  async _liveUpdatesItemsMeta(
    @graphql.Args() args: LiveUpdatesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LiveUpdates])
  async liveUpdatesItems(
    @graphql.Args() args: LiveUpdatesFindManyArgs
  ): Promise<LiveUpdates[]> {
    return this.service.liveUpdatesItems(args);
  }

  @graphql.Query(() => LiveUpdates, { nullable: true })
  async liveUpdates(
    @graphql.Args() args: LiveUpdatesFindUniqueArgs
  ): Promise<LiveUpdates | null> {
    const result = await this.service.liveUpdates(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LiveUpdates)
  async createLiveUpdates(
    @graphql.Args() args: CreateLiveUpdatesArgs
  ): Promise<LiveUpdates> {
    return await this.service.createLiveUpdates({
      ...args,
      data: {
        ...args.data,

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LiveUpdates)
  async updateLiveUpdates(
    @graphql.Args() args: UpdateLiveUpdatesArgs
  ): Promise<LiveUpdates | null> {
    try {
      return await this.service.updateLiveUpdates({
        ...args,
        data: {
          ...args.data,

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LiveUpdates)
  async deleteLiveUpdates(
    @graphql.Args() args: DeleteLiveUpdatesArgs
  ): Promise<LiveUpdates | null> {
    try {
      return await this.service.deleteLiveUpdates(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  async getOrder(@graphql.Parent() parent: LiveUpdates): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
