/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LiveUpdatesService } from "../liveUpdates.service";
import { LiveUpdatesCreateInput } from "./LiveUpdatesCreateInput";
import { LiveUpdates } from "./LiveUpdates";
import { LiveUpdatesFindManyArgs } from "./LiveUpdatesFindManyArgs";
import { LiveUpdatesWhereUniqueInput } from "./LiveUpdatesWhereUniqueInput";
import { LiveUpdatesUpdateInput } from "./LiveUpdatesUpdateInput";

export class LiveUpdatesControllerBase {
  constructor(protected readonly service: LiveUpdatesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LiveUpdates })
  async createLiveUpdates(
    @common.Body() data: LiveUpdatesCreateInput
  ): Promise<LiveUpdates> {
    return await this.service.createLiveUpdates({
      data: {
        ...data,

        order: data.order
          ? {
              connect: data.order,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        currentLocation: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LiveUpdates] })
  @ApiNestedQuery(LiveUpdatesFindManyArgs)
  async liveUpdatesItems(
    @common.Req() request: Request
  ): Promise<LiveUpdates[]> {
    const args = plainToClass(LiveUpdatesFindManyArgs, request.query);
    return this.service.liveUpdatesItems({
      ...args,
      select: {
        createdAt: true,
        currentLocation: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LiveUpdates })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async liveUpdates(
    @common.Param() params: LiveUpdatesWhereUniqueInput
  ): Promise<LiveUpdates | null> {
    const result = await this.service.liveUpdates({
      where: params,
      select: {
        createdAt: true,
        currentLocation: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LiveUpdates })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLiveUpdates(
    @common.Param() params: LiveUpdatesWhereUniqueInput,
    @common.Body() data: LiveUpdatesUpdateInput
  ): Promise<LiveUpdates | null> {
    try {
      return await this.service.updateLiveUpdates({
        where: params,
        data: {
          ...data,

          order: data.order
            ? {
                connect: data.order,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          currentLocation: true,
          id: true,

          order: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LiveUpdates })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLiveUpdates(
    @common.Param() params: LiveUpdatesWhereUniqueInput
  ): Promise<LiveUpdates | null> {
    try {
      return await this.service.deleteLiveUpdates({
        where: params,
        select: {
          createdAt: true,
          currentLocation: true,
          id: true,

          order: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
