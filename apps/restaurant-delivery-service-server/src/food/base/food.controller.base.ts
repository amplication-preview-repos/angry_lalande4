/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FoodService } from "../food.service";
import { FoodCreateInput } from "./FoodCreateInput";
import { Food } from "./Food";
import { FoodFindManyArgs } from "./FoodFindManyArgs";
import { FoodWhereUniqueInput } from "./FoodWhereUniqueInput";
import { FoodUpdateInput } from "./FoodUpdateInput";
import { CartFindManyArgs } from "../../cart/base/CartFindManyArgs";
import { Cart } from "../../cart/base/Cart";
import { CartWhereUniqueInput } from "../../cart/base/CartWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ReviewWhereUniqueInput } from "../../review/base/ReviewWhereUniqueInput";

export class FoodControllerBase {
  constructor(protected readonly service: FoodService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Food })
  async createFood(@common.Body() data: FoodCreateInput): Promise<Food> {
    return await this.service.createFood({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isAvailable: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Food] })
  @ApiNestedQuery(FoodFindManyArgs)
  async foods(@common.Req() request: Request): Promise<Food[]> {
    const args = plainToClass(FoodFindManyArgs, request.query);
    return this.service.foods({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isAvailable: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Food })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async food(
    @common.Param() params: FoodWhereUniqueInput
  ): Promise<Food | null> {
    const result = await this.service.food({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isAvailable: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Food })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFood(
    @common.Param() params: FoodWhereUniqueInput,
    @common.Body() data: FoodUpdateInput
  ): Promise<Food | null> {
    try {
      return await this.service.updateFood({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          isAvailable: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Food })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFood(
    @common.Param() params: FoodWhereUniqueInput
  ): Promise<Food | null> {
    try {
      return await this.service.deleteFood({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          isAvailable: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/carts")
  @ApiNestedQuery(CartFindManyArgs)
  async findCarts(
    @common.Req() request: Request,
    @common.Param() params: FoodWhereUniqueInput
  ): Promise<Cart[]> {
    const query = plainToClass(CartFindManyArgs, request.query);
    const results = await this.service.findCarts(params.id, {
      ...query,
      select: {
        createdAt: true,

        food: {
          select: {
            id: true,
          },
        },

        id: true,
        quantity: true,
        updatedAt: true,
        user: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/carts")
  async connectCarts(
    @common.Param() params: FoodWhereUniqueInput,
    @common.Body() body: CartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      carts: {
        connect: body,
      },
    };
    await this.service.updateFood({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/carts")
  async updateCarts(
    @common.Param() params: FoodWhereUniqueInput,
    @common.Body() body: CartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      carts: {
        set: body,
      },
    };
    await this.service.updateFood({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/carts")
  async disconnectCarts(
    @common.Param() params: FoodWhereUniqueInput,
    @common.Body() body: CartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      carts: {
        disconnect: body,
      },
    };
    await this.service.updateFood({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/orders")
  @ApiNestedQuery(OrderFindManyArgs)
  async findOrders(
    @common.Req() request: Request,
    @common.Param() params: FoodWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrders(params.id, {
      ...query,
      select: {
        createdAt: true,

        food: {
          select: {
            id: true,
          },
        },

        id: true,
        status: true,
        totalAmount: true,
        updatedAt: true,
        user: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orders")
  async connectOrders(
    @common.Param() params: FoodWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        connect: body,
      },
    };
    await this.service.updateFood({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orders")
  async updateOrders(
    @common.Param() params: FoodWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        set: body,
      },
    };
    await this.service.updateFood({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orders")
  async disconnectOrders(
    @common.Param() params: FoodWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        disconnect: body,
      },
    };
    await this.service.updateFood({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/reviews")
  @ApiNestedQuery(ReviewFindManyArgs)
  async findReviews(
    @common.Req() request: Request,
    @common.Param() params: FoodWhereUniqueInput
  ): Promise<Review[]> {
    const query = plainToClass(ReviewFindManyArgs, request.query);
    const results = await this.service.findReviews(params.id, {
      ...query,
      select: {
        comment: true,
        createdAt: true,

        food: {
          select: {
            id: true,
          },
        },

        id: true,
        rating: true,
        updatedAt: true,
        user: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reviews")
  async connectReviews(
    @common.Param() params: FoodWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        connect: body,
      },
    };
    await this.service.updateFood({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reviews")
  async updateReviews(
    @common.Param() params: FoodWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        set: body,
      },
    };
    await this.service.updateFood({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reviews")
  async disconnectReviews(
    @common.Param() params: FoodWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        disconnect: body,
      },
    };
    await this.service.updateFood({
      where: params,
      data,
      select: { id: true },
    });
  }
}
